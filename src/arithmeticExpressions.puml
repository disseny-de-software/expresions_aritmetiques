@startuml

skinparam classAttributeIconSize 0

abstract ArithmeticExpression {
+ {abstract} calculate() : double
}

class Constant implements ArithmeticExpression {
- value : double
--
+ calculate() : double
}

note left of Constant
return value
end note

abstract BinaryOperator implements ArithmeticExpression {
# left : ArithmeticExpression
# right : ArithmeticExpression
--
BinaryOperator(left, right : ArithmeticExpression)
}

BinaryOperator *--> ArithmeticExpression : "2 left, right"

note left of BinaryOperator
left = leftOperand
right = rightOperand
end note

class Sum extends BinaryOperator {
--
+ calculate()
}

note bottom of Sum
return left.calculate()
       + right.calculate()
end note

class Product extends BinaryOperator {
+ calculate()
}

note bottom of Product
return left.calculate() *
    right.calculate()
end note

class Subtract extends BinaryOperator {
--
+ calculate()
}


class Division extends BinaryOperator {
--
+ calculate()
}


@enduml